{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aarongreenburg/Uzumaki/Work/SWE/Open-Source/Workout-Management-React-App/workout-management-app/src/components/Calendar/calendar-body.jsx\";\nimport React from 'react';\nimport './calendar.css';\nimport nextId from \"react-id-generator\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst CalendarBody = props => {\n  const {\n    firstDayOfMonth,\n    daysInMonth,\n    currentDay,\n    currentMonth,\n    currentMonthNum,\n    selectedDay,\n    activeDays,\n    setSelectedDay,\n    actualMonth,\n    weekdays\n  } = props;\n  let blanks = [];\n\n  for (let i = 0; i < firstDayOfMonth(); i++) {\n    blanks.push( /*#__PURE__*/_jsxDEV(TableCell, {\n      children: \"\"\n    }, nextId(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this));\n  }\n\n  let monthDays = [];\n\n  for (let d = 1; d <= daysInMonth(); d++) {\n    let currDay, selectDay, activeDay; // Check if day is today\n\n    if (currentDay() == d && currentMonth() == actualMonth()) currDay = \"today\"; // Check if day is selected day\n\n    if (selectedDay.day == d && currentMonthNum() == selectedDay.month) selectDay = \"selected-day\"; // Check if day found in this month active days\n\n    let formattedDate = `${d}-${currentMonthNum()}`;\n    if (activeDays.indexOf(formattedDate) !== -1) activeDay = \"active\"; // console.log(activeDays);\n\n    monthDays.push( /*#__PURE__*/_jsxDEV(TableCell, {\n      className: `week-day ${currDay} ${selectDay}`,\n      onClick: () => setSelectedDay(d),\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: activeDay,\n        children: d\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, d, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this));\n  }\n\n  let totalSlots = [...blanks, ...monthDays];\n  let rows = [];\n  let cells = [];\n  totalSlots.forEach((row, i) => {\n    if (i % 7 !== 0) {\n      cells.push(row);\n    } else {\n      rows.push(cells);\n      cells = [];\n      cells.push(row);\n    }\n\n    if (i === totalSlots.length - 1) {\n      rows.push(cells);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      className: \"calendar\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: weekdays.map((day, i) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: day\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows.map((day, i) => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: day\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_c = CalendarBody;\nexport default CalendarBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarBody\");","map":{"version":3,"sources":["/Users/aarongreenburg/Uzumaki/Work/SWE/Open-Source/Workout-Management-React-App/workout-management-app/src/components/Calendar/calendar-body.jsx"],"names":["React","nextId","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","CalendarBody","props","firstDayOfMonth","daysInMonth","currentDay","currentMonth","currentMonthNum","selectedDay","activeDays","setSelectedDay","actualMonth","weekdays","blanks","i","push","monthDays","d","currDay","selectDay","activeDay","day","month","formattedDate","indexOf","totalSlots","rows","cells","forEach","row","length","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './calendar.css';\nimport nextId from \"react-id-generator\";\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst CalendarBody = props => {\n\n    const { firstDayOfMonth, daysInMonth, currentDay, currentMonth, currentMonthNum, selectedDay, activeDays, setSelectedDay, actualMonth, weekdays } = props;\n\n    let blanks = [];\n    for (let i = 0; i < firstDayOfMonth(); i++) {\n        blanks.push(\n            <TableCell key={nextId()}>{\"\"}</TableCell>\n        )\n    }\n\n    let monthDays = [];\n    for (let d = 1; d <= daysInMonth(); d++) {\n        let currDay, selectDay, activeDay;\n\n        // Check if day is today\n        if (currentDay() == d && currentMonth() == actualMonth()) currDay = \"today\";\n\n        // Check if day is selected day\n        if (selectedDay.day == d && currentMonthNum() == selectedDay.month ) selectDay = \"selected-day\";\n        \n        // Check if day found in this month active days\n        let formattedDate = `${d}-${currentMonthNum()}`;\n        if (activeDays.indexOf(formattedDate) !== -1) activeDay = \"active\";\n\n        // console.log(activeDays);\n\n        monthDays.push(\n            <TableCell \n                key={d} \n                className={`week-day ${currDay} ${selectDay}`}\n                onClick={() => setSelectedDay(d)}\n            >\n                <span className={activeDay}>{d}</span>\n            </TableCell>\n        );\n    }\n\n    let totalSlots = [...blanks, ...monthDays];\n    let rows = [];\n    let cells = [];\n\n    totalSlots.forEach((row, i) => {\n        if (i % 7 !== 0) {\n            cells.push(row);\n        } else {\n            rows.push(cells);\n            cells = [];\n            cells.push(row);\n        }\n        if (i === totalSlots.length - 1) {\n            rows.push(cells)\n        }\n    })\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className=\"calendar\">\n                <TableHead>\n                    <TableRow>\n                        {\n                            weekdays.map((day, i) => (\n                                <TableCell key={i}>\n                                    {day}\n                                </TableCell>\n                            ))\n                        }\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        rows.map((day, i) => \n                            <TableRow \n                                key={i}\n                            >\n                                {day}\n                            </TableRow>)\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\nexport default CalendarBody;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aarongreenburg/Uzumaki/Work/SWE/Open-Source/Workout-Management-React-App/workout-management-app/src/components/Calendar/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CalendarBody from './calendar-body';\nimport CalendarHead from './calendar-head';\nimport AddActivity from '../AddActivity';\nimport EditActivity from '../EditActivity';\nimport ActivityList from '../ActivityList';\n\nfunction Calendar(props) {\n  _s();\n\n  const {\n    firebase,\n    authUser\n  } = props;\n  let defaultSelectedDay = {\n    day: moment().format(\"D\"),\n    month: moment().month()\n  };\n  /*** HOOKS ***/\n\n  const [dateObject, setdateObject] = useState(moment());\n  const [showMonthTable, setShowMonthTable] = useState(false);\n  const [selectedDay, setSelected] = useState(defaultSelectedDay); // Later add hook for active days from database\n\n  /*** CALENDAR HEAD ***/\n\n  const allMonths = moment.months();\n\n  const currentMonth = () => dateObject.format(\"MMMM\");\n\n  const currentYear = () => dateObject.format(\"YYYY\");\n\n  const setMonth = month => {\n    let monthNo = allMonths.indexOf(month);\n    let newDateObject = Object.assign({}, dateObject);\n    newDateObject = moment(dateObject).set(\"month\", monthNo);\n    setdateObject(newDateObject);\n    setShowMonthTable(false);\n  };\n\n  const toggleMonthSelect = () => setShowMonthTable(!showMonthTable);\n  /*** CALENDAR BODY ***/\n\n\n  const setSelectedDay = day => {\n    setSelected({\n      day,\n      month: currentMonthNum()\n    }); // Later refresh data\n  };\n\n  const currentMonthNum = () => dateObject.month();\n\n  const daysInMonth = () => dateObject.daysInMonth();\n\n  const currentDay = () => dateObject.format(\"D\");\n\n  const actualMonth = () => moment().format(\"MMMM\");\n\n  const firstDayOfMonth = () => moment(dateObject).startOf(\"month\").format(\"d\");\n  /*** ADDING AN ACTIVITY ***/\n\n\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [snackbarMsg, setSnackbarMsg] = useState(null);\n  /*** ACTIVITY LIST ***/\n\n  const [activities, setActivities] = useState(true);\n  const [loading, setLoading] = useState([]);\n  const [activeDays, setActiveDays] = useState([]);\n\n  const retrieveData = () => {\n    let queryDate = `${selectedDay.day}-${selectedDay.month}-${selectedDay.year}`;\n    let ref = firebase.db.ref().child(`users/${authUser.uid}/activities`);\n    ref.orderByChild(\"date\").equalTo(queryDate).on(\"value\", snapshot => {\n      let data = snapshot.val();\n      setActivities(data);\n      setLoading(false); // setEditing(false); Add later\n    }); // Update active days\n\n    retrieveActiveDays();\n  };\n\n  const retrieveActiveDays = () => {\n    let ref = firebase.db.ref().child(`users/${authUser.uid}/activities`);\n    ref.on(\"value\", snapshot => {\n      let data = snapshot.val();\n      const values = Object.values(data); // Store all active day/month combinations in array for calendar\n\n      const arr = values.map(obj => {\n        return obj.date.length === 8 ? obj.date.slice(0, 3) : obj.date.slice(0, 4);\n      });\n      console.log(arr);\n      setActiveDays(arr);\n    });\n  };\n\n  useEffect(() => retrieveData(), [selectedDay]);\n  /*** EDIT AN ACTIVITY ***/\n\n  const [editing, setEditing] = useState(false);\n  const [activity, setActivity] = useState(null);\n  const [activityKey, setActivityKey] = useState(null);\n\n  const editActivity = (activity, i) => {\n    setActivityKey(Object.keys(activities)[i]);\n    setEditing(true);\n    setActivity(activity);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 8,\n      lg: 9,\n      children: [/*#__PURE__*/_jsxDEV(CalendarHead, {\n        allMonths: allMonths,\n        currentMonth: currentMonth,\n        currentYear: currentYear,\n        setMonth: setMonth,\n        showMonthTable: showMonthTable,\n        toggleMonthSelect: toggleMonthSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(CalendarBody, {\n        firstDayOfMonth: firstDayOfMonth,\n        daysInMonth: daysInMonth,\n        currentDay: currentDay,\n        currentMonth: currentMonth,\n        currentMonthNum: currentMonthNum,\n        actualMonth: actualMonth,\n        setSelectedDay: setSelectedDay,\n        selectedDay: selectedDay,\n        weekdays: moment.weekdays(),\n        activeDays: activeDays\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 4,\n      lg: 3,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: \"paper\",\n        children: editing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Edit activity on \", selectedDay.day, \"-\", selectedDay.month + 1, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(EditActivity, {\n            activity: activity,\n            activityKey: activityKey,\n            selectedDay: selectedDay,\n            authUser: props.authUser,\n            setEditing: setEditing,\n            setOpenSnackbar: setOpenSnackbar,\n            setSnackbarMsg: setSnackbarMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Add activity on \", selectedDay.day, \"-\", selectedDay.month + 1, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(AddActivity, {\n            selectedDay: selectedDay,\n            authUser: props.authUser,\n            setOpenSnackbar: setOpenSnackbar,\n            setSnackbarMsg: setSnackbarMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 7,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: \"paper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Activities on \", selectedDay.day, \"-\", selectedDay.month + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ActivityList, {\n          loading: loading,\n          activities: activities,\n          authUser: props.authUser,\n          setOpenSnackbar: setOpenSnackbar,\n          setSnackbarMsg: setSnackbarMsg,\n          editActivity: editActivity,\n          setEditing: setEditing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      open: openSnackbar,\n      message: snackbarMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Calendar, \"vJ0aDzcZxHdQCbp5VxwoukoYnhs=\");\n\n_c = Calendar;\n;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/aarongreenburg/Uzumaki/Work/SWE/Open-Source/Workout-Management-React-App/workout-management-app/src/components/Calendar/index.jsx"],"names":["React","useState","useEffect","moment","Grid","Paper","Snackbar","CalendarBody","CalendarHead","AddActivity","EditActivity","ActivityList","Calendar","props","firebase","authUser","defaultSelectedDay","day","format","month","dateObject","setdateObject","showMonthTable","setShowMonthTable","selectedDay","setSelected","allMonths","months","currentMonth","currentYear","setMonth","monthNo","indexOf","newDateObject","Object","assign","set","toggleMonthSelect","setSelectedDay","currentMonthNum","daysInMonth","currentDay","actualMonth","firstDayOfMonth","startOf","openSnackbar","setOpenSnackbar","snackbarMsg","setSnackbarMsg","activities","setActivities","loading","setLoading","activeDays","setActiveDays","retrieveData","queryDate","year","ref","db","child","uid","orderByChild","equalTo","on","snapshot","data","val","retrieveActiveDays","values","arr","map","obj","date","length","slice","console","log","editing","setEditing","activity","setActivity","activityKey","setActivityKey","editActivity","i","keys","weekdays","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport CalendarBody from './calendar-body';\nimport CalendarHead from './calendar-head';\n\nimport AddActivity from '../AddActivity';\nimport EditActivity from '../EditActivity';\nimport ActivityList from '../ActivityList';\n\nfunction Calendar(props) {\n\n    const {firebase, authUser} = props;\n\n    let defaultSelectedDay = {\n        day: moment().format(\"D\"),\n        month: moment().month()\n    };\n\n    /*** HOOKS ***/\n    const [dateObject, setdateObject] = useState(moment());\n    const [showMonthTable, setShowMonthTable] = useState(false);\n    const [selectedDay, setSelected] = useState(defaultSelectedDay);\n    // Later add hook for active days from database\n\n    /*** CALENDAR HEAD ***/\n    const allMonths = moment.months();\n    const currentMonth = () => dateObject.format(\"MMMM\");\n    const currentYear = () => dateObject.format(\"YYYY\");\n\n    const setMonth = month => {\n        let monthNo = allMonths.indexOf(month);\n        let newDateObject = Object.assign({}, dateObject);\n        newDateObject = moment(dateObject).set(\"month\", monthNo);\n        setdateObject(newDateObject);\n        setShowMonthTable(false);\n    }\n\n    const toggleMonthSelect = () => setShowMonthTable(!showMonthTable);\n\n    /*** CALENDAR BODY ***/\n    const setSelectedDay = day => {\n        setSelected({\n                day,\n                month: currentMonthNum()\n        });\n         // Later refresh data\n    };\n\n    const currentMonthNum = () => dateObject.month();\n    const daysInMonth = () => dateObject.daysInMonth();\n    const currentDay = () => dateObject.format(\"D\");\n    const actualMonth = () => moment().format(\"MMMM\");\n\n    const firstDayOfMonth = () => moment(dateObject).startOf(\"month\").format(\"d\");\n\n    /*** ADDING AN ACTIVITY ***/\n    const [openSnackbar, setOpenSnackbar] = useState(false);\n    const [snackbarMsg, setSnackbarMsg] = useState(null);\n\n    /*** ACTIVITY LIST ***/\n    const [activities, setActivities] = useState(true);\n    const [loading, setLoading] = useState([]);\n    const [activeDays, setActiveDays] = useState([]);\n\n    const retrieveData = () => {\n        \n        let queryDate = `${selectedDay.day}-${selectedDay.month}-${selectedDay.year}`;\n\n        let ref = firebase.db.ref().child(`users/${authUser.uid}/activities`);\n        ref.orderByChild(\"date\").equalTo(queryDate).on(\"value\", snapshot => {\n            let data = snapshot.val();\n            setActivities(data);\n            setLoading(false);\n            // setEditing(false); Add later\n        });\n\n        // Update active days\n        retrieveActiveDays();\n    };\n\n    const retrieveActiveDays = () => {\n        let ref = firebase.db.ref().child(`users/${authUser.uid}/activities`);\n        ref.on(\"value\", snapshot => {\n            let data = snapshot.val();\n            const values = Object.values(data);\n            // Store all active day/month combinations in array for calendar\n            const arr = values.map(obj => {\n                return obj.date.length === 8\n                ? obj.date.slice(0,3)\n                : obj.date.slice(0,4)\n            });\n            console.log(arr);\n            setActiveDays(arr);\n        });\n    }\n\n    useEffect(() => retrieveData(), [selectedDay]);\n\n    /*** EDIT AN ACTIVITY ***/\n    const [editing, setEditing] = useState(false);\n    const [activity, setActivity] = useState(null);\n    const [activityKey, setActivityKey] = useState(null);\n\n    const editActivity = (activity, i) => {\n        setActivityKey(Object.keys(activities)[i]);\n        setEditing(true);\n        setActivity(activity);\n    }\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12} md={8} lg={9}>\n                    <CalendarHead\n                        allMonths={allMonths}\n                        currentMonth={currentMonth}\n                        currentYear={currentYear}\n                        setMonth={setMonth}\n                        showMonthTable={showMonthTable}\n                        toggleMonthSelect={toggleMonthSelect}\n                    />\n                    <CalendarBody \n                        firstDayOfMonth={firstDayOfMonth}\n                        daysInMonth={daysInMonth}\n                        currentDay={currentDay}\n                        currentMonth={currentMonth}\n                        currentMonthNum={currentMonthNum}\n                        actualMonth={actualMonth}\n                        setSelectedDay={setSelectedDay}\n                        selectedDay={selectedDay}\n                        weekdays={moment.weekdays()} \n                        activeDays={activeDays}\n                    />\n            </Grid>\n            <Grid item xs={12} md={4} lg={3}>\n                <Paper className=\"paper\">\n                    { editing\n                        ?\n                            <>\n                                <h3>Edit activity on {selectedDay.day}-{selectedDay.month + 1} </h3>\n                                <EditActivity \n                                    activity={activity}\n                                    activityKey={activityKey}\n                                    selectedDay={selectedDay} \n                                    authUser={props.authUser}\n                                    setEditing={setEditing}\n                                    setOpenSnackbar={setOpenSnackbar}\n                                    setSnackbarMsg={setSnackbarMsg}\n                                />\n                            </>\n                        :\n                            <>\n                                <h3>Add activity on {selectedDay.day}-{selectedDay.month + 1} </h3>\n                                <AddActivity \n                                    selectedDay={selectedDay} \n                                    authUser={props.authUser}\n                                    setOpenSnackbar={setOpenSnackbar}\n                                    setSnackbarMsg={setSnackbarMsg}\n                                />\n                            </>\n                    }\n                </Paper>\n            </Grid>\n            <Grid item xs={12} md={7}>\n                <Paper className=\"paper\">\n                <h3>Activities on {selectedDay.day}-{selectedDay.month + 1}</h3>\n                <ActivityList\n                    loading={loading}\n                    activities={activities}\n                    authUser={props.authUser}\n                    setOpenSnackbar={setOpenSnackbar}\n                    setSnackbarMsg={setSnackbarMsg}\n                    editActivity={editActivity}\n                    setEditing={setEditing}\n                />\n                </Paper>\n            </Grid>\n            <Snackbar \n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}\n                open={openSnackbar} \n                message={snackbarMsg}\n            />\n        </Grid>\n    )\n};\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}